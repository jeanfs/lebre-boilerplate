$grid: (
	columns: 12,
	system-width: 100%,
	column-width: 6%,
	gutter-width: 2.5%,
	column-prefix: col, //Class to prefix all columns with - output will be .col1, .col2 etc.
	columnset-class: cs, //Class of the container
	grid-type: inline-block, //Planned support for float and flex in future, for now limited to inline-block
	required-counts: (3,4,6,8,9) //Either all or a list of required column counts
);

$project-grid: () !default;

//
// Alias for fetch that fetches a value if it exists in either your `$project-grid` or the default `$grid`
// @requires {function} fetch
// @param {string} $value - Key to lookup in the merged map of grid values.
// @returns {string | number | list} Returns value associated with key
//
@function fetch-grid(
		$value
	) {
	@return fetch($value,$project-grid,$grid)
};

//
// Calculates column widths
// @requires {function} fetch-grid
// @param {number} $columns (1) - Number of columns we're calculating
// @param {bool} $adjusted (false) - Whether the width needs to be adjusted - needs adjusting if we're using multiple rows in a single parent.
// @param {number} $total-columns (fetch-grid(columns)) - Total number of columns in the grid system.
// @param {number} $column-width (fetch-grid(column-width)) - Column width
// @param {number} $gutter-width (fetch-grid(gutter-width)) - Gutter width
// @returns {number} Width of the number of columns specified
//
@function column-width(
		$columns: 1,
		$adjusted: false,
		$total-columns: fetch-grid(columns),
		$column-width: fetch-grid(column-width),
		$gutter-width: fetch-grid(gutter-width)
	) {

	// if no adjustment to the widths is needed
	$adjustment-factor: 1;

	// if we need to adjust (when using inline-block multi-row grid)
	@if $adjusted {
		$adjustment-factor: ($total-columns * ($column-width + $gutter-width))/99.5%;
	}

	@return $columns * ($column-width / $adjustment-factor) + ($columns - 1) * ($gutter-width / $adjustment-factor)
};

//
// Calculates nested column widths
// @requires {function} fetch-grid
// @requires {function} column-width
// @param {number} $columns (1) - Number of columns we're calculating
// @param {string} $type (column) - Type of width we're calculating. Can be `column`, `gutter` or `cs-gutter`
// @param {number} $parent-columns (fetch-grid(columns)) - Number of columns in the parent
// @param {number} $total-columns (fetch-grid(columns)) - Total number of columns in the grid system.
// @param {number} $column-width (fetch-grid(column-width)) - Column width
// @param {number} $gutter-width (fetch-grid(gutter-width)) - Gutter width
// @returns {number} Width of the number of nested columns specified
//
@function nested-width(
		$columns: 1,
		$type: column,
		$parent-columns: fetch-grid(columns),
		$total-columns: fetch-grid(columns),
		$column-width: fetch-grid(column-width),
		$gutter-width: fetch-grid(gutter-width)
	) {

	// We need to get what the width would be if this wasn't nested
	$base-column-width: column-width($columns,true,$total-columns,$column-width,$gutter-width);
	$base-gutter-width: gutter-width($total-columns,true,$column-width,$gutter-width);

	// Then we need the width of the parent column that this columnset will be nested inside
	$parent-column-width: column-width($parent-columns,true,$total-columns,$column-width,$gutter-width);

	//Dividing the base by the parent gives us the nested values we need to adjust
	$adjusted-base-column-width: ($base-column-width / $parent-column-width)*100%;
	$adjusted-base-gutter-width: ($base-gutter-width / $parent-column-width)*100%;

	$adjustment-factor: ($parent-columns * ($adjusted-base-column-width + $adjusted-base-gutter-width))/99.5%;

	@if $type == column {
		@return $columns * ($adjusted-base-column-width / $adjustment-factor)
	}
	@else if $type == gutter {
		@return $adjusted-base-gutter-width / $adjustment-factor
	}
	@else if $type == cs-gutter {
		@return $adjusted-base-gutter-width
	}
};

//
// Calculates gutter widths
// @requires {function} fetch-grid
// @param {number} $total-columns (fetch-grid(columns)) - Total number of columns in the grid system.
// @param {bool} $adjusted (false) - Whether the width needs to be adjusted - needs adjusting if we're using multiple rows in a single parent.
// @param {number} $column-width (fetch-grid(column-width)) - Column width
// @param {number} $gutter-width (fetch-grid(gutter-width)) - Gutter width
// @returns {number} Width of the gutters
//
@function gutter-width(
		$total-columns: fetch-grid(columns),
		$adjusted: false,
		$column-width: fetch-grid(column-width),
		$gutter-width: fetch-grid(gutter-width)
	) {

	// if no adjustment to the widths is needed
	$adjustment-factor: 1;

	// if we need to adjust (when using inline-block multi-row grid)
	@if $adjusted {
		$adjustment-factor: ($total-columns * ($column-width + $gutter-width))/99.5%;
	}

	@return $gutter-width / $adjustment-factor
};

//
// Calculates columnset width
// @requires {function} fetch-grid
// @param {number} $total-columns (fetch-grid(columns)) - Total number of columns in the grid system.
// @param {number} $column-width (fetch-grid(column-width)) - Column width
// @param {number} $gutter-width (fetch-grid(gutter-width)) - Gutter width
// @returns {number} Adjusted width of the columnset in order to accomodate the extra gutter
//
@function columnset-width(
		$total-columns: fetch-grid(columns),
		$column-width: fetch-grid(column-width),
		$gutter-width: fetch-grid(gutter-width)
	) {

	@return (100% / (99.5% - gutter-width($total-columns,true,$column-width,$gutter-width)))*100%
};

//
// Outputs a set of classes that form a grid system based on the values specified
// @requires {function} fetch-grid
// @alias flexible-grid
// @alias fixed-grid
// @example scss
//  @include grid-system(12, 6%, 2.5%, 100%, col, cs, inline-block, (3,6,9));
//
@mixin grid-system(
		$total-columns: fetch-grid(columns),
		$column-width: fetch-grid(column-width),
		$gutter-width: fetch-grid(gutter-width),
		$system-width: fetch-grid(system-width),
		$column-prefix: fetch-grid(column-prefix),
		$columnset-class: fetch-grid(columnset-class),
		$grid-type: fetch-grid(grid-type),
		$required-counts: fetch-grid(required-counts)
	) {
	// If this is a repsonsive grid system (system-width = 100%) then pass the data to the flexible-mixin
	@if $system-width == 100% {
		@include flexible-grid($total-columns, $column-width, $gutter-width, $system-width, $column-prefix, $columnset-class, $grid-type);
	}
	// Otherwise if this is a fixed width grid system, pass the data to the fixed-grid mixin
	@else if unit($system-width) == px or unit($system-width) == em or unit($system-width) == rem {
		@include fixed-grid($total-columns, $column-width, $gutter-width, $system-width, $column-prefix, $columnset-class, $grid-type);
	}
	@else {
		@warn "You have entered an incompatible system-width value in your grid system configuration. For a responsive grid use 100%, for a fixed grid use px, ems or rems."
	}
};

//
// Outputs a set of classes that form a responsive grid system based on the values specified
// @requires {function} fetch-grid
// @requires {function} column-width
// @requires {function} gutter-width
// @requires {function} nested-width
// @requires {function} columnset-width
// @param {number} $total-columns (fetch-grid(columns)) - Total number of columns in the grid system.
// @param {number} $column-width (fetch-grid(column-width)) - Column width
// @param {number} $gutter-width (fetch-grid(gutter-width)) - Gutter width
// @param {number} $system-width (fetch-grid(system-width)) - System width
// @param {string} $column-prefix (fetch-grid(column-prefix)) - What to prefix the columns with - eg. col, column etc.
// @param {string} $columnset-class (fetch-grid(columnset-class)) - What class should the container element have
// @param {string} $grid-type (fetch-grid(grid-type)) - Defaults to inline-block, which is currrently the only supported variation
// @param {list | string} $required-counts (fetch-grid(required-counts)) - Which column counts to include in the output. Most projects won't need classes for col1, col2, col11, col12 etc.
// @author Simon Buerger
//
@mixin flexible-grid(
		$total-columns: fetch-grid(columns),
		$column-width: fetch-grid(column-width),
		$gutter-width: fetch-grid(gutter-width),
		$system-width: fetch-grid(system-width),
		$column-prefix: fetch-grid(column-prefix),
		$columnset-class: fetch-grid(columnset-class),
		$grid-type: fetch-grid(grid-type),
		$required-counts: fetch-grid(required-counts)
	) {

	// Columnset styles
	.#{$columnset-class} {
		width: columnset-width($total-columns,$column-width,$gutter-width);
		margin-left: -#{gutter-width($total-columns,true,$column-width,$gutter-width)/2};
		margin-right: -#{gutter-width($total-columns,true,$column-width,$gutter-width)/2};
		font-size: 0;
		position: relative;
		// Styles for all columns
		& > [class^=#{$column-prefix}] {
			vertical-align:top;
			display: inline-block;
			font-size: 16px;
			font-size: 1rem;
			margin-left: #{gutter-width($total-columns,true,$column-width,$gutter-width)/2};
			margin-right: #{gutter-width($total-columns,true,$column-width,$gutter-width)/2};

			// Fallbacks for IE7
			*display: inline;
			*zoom: 1;
		}
		// Loop through column counts
		@for $i from 1 through $total-columns {
			// If column count is in the list of required counts (or all counts are requested)
			@if $required-counts == all or index($required-counts,$i) {
				// Individual column widths
				& > .#{$column-prefix}#{$i} {
					width: column-width($i,true,$total-columns,$column-width,$gutter-width);
					// Adjust columnset width and margins for nested columnset
					& > .#{$columnset-class} {
						width: columnset-width($i,nested-width(1,column,$i),nested-width(1,gutter,$i));
						margin-left: -#{nested-width(1,cs-gutter,$i,$total-columns,$column-width,$gutter-width)/2};
						margin-right: -#{nested-width(1,cs-gutter,$i,$total-columns,$column-width,$gutter-width)/2};
						// Adjust column margins for nested columns
						& > [class^=#{$column-prefix}] {
							margin-left: #{nested-width(1,gutter,$i,$total-columns,$column-width,$gutter-width)/2};
							margin-right: #{nested-width(1,gutter,$i,$total-columns,$column-width,$gutter-width)/2};
						}
						// Loop through nested columns
						@for $j from 1 through $i {
							// If column count is in the list of required counts (or all counts are requested)
							@if $required-counts == all or index($required-counts,$j) {
								// Adjust column widths for nested columns
								& > .#{$column-prefix}#{$j} {
									width: nested-width($j,column,$i,$total-columns,$column-width,$gutter-width);
								}
							}
						}
					}
				}
			}
		}
	}
}


@mixin fixed-grid(
		$total-columns: fetch-grid(columns),
		$column-width: fetch-grid(column-width),
		$gutter-width: fetch-grid(gutter-width),
		$system-width: fetch-grid(system-width),
		$column-prefix: fetch-grid(column-prefix),
		$columnset-class: fetch-grid(columnset-class),
		$grid-type: fetch-grid(grid-type),
		$required-counts: fetch-grid(required-counts)
	) {
	//Fixed grid code to go here
}
